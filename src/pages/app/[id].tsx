/* eslint-disable @next/next/no-img-element */
import { Box, Button, Flex } from '@chakra-ui/react';
import {
  addDoc,
  collection,
  doc,
  getDoc,
  onSnapshot,
  query,
  where,
} from 'firebase/firestore';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { db } from '../../../firebase';
import Layout from '../../components/Layout';
import Styles from '../../styles/AppId.module.scss';

const AppId: NextPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const [title, setTitle] = useState('');
  const [leftImage, setLeftImage] = useState('');
  const [rightImage, setRightImage] = useState('');
  const [startButton, setStartButton] = useState(true);
  const [storageImages, setStorageImages] = useState<any>([]); //データベースからイメージ画像を取得
  const [imagesArray, setImagesArray] = useState<any>([]);
  const [rightFadeout, setRightFadeout] = useState(false);
  const [leftFadeout, setLeftFadeout] = useState(false);

  //postsからタイトルを取得
  useEffect(() => {
    const getPost = async () => {
      try {
        const docRef = doc(db, 'posts', `${id}`);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          setTitle(docSnap.data().title);
        }
      } catch (error) {
        console.log(error);
      }
    };
    getPost();
  }, [id]);

  //イメージ画像データ一覧を取得
  useEffect(() => {
    const getImages = async () => {
      try {
        const q = query(
          collection(db, 'images'),
          where('postId', '==', `${id}`)
        );
        const unsub = onSnapshot(q, (querySnapshot) => {
          setStorageImages(
            querySnapshot.docs.map((doc) => ({
              ...doc.data(),
              id: doc.id,
            }))
          );
        });
      } catch (error) {
        console.log(error);
      }
    };
    getImages();
  }, [id, startButton]);

  //スタート
  const onStartClick = () => {
    const shuffleImages = shuffle(storageImages);
    if (leftImage === '') {
      const firstImage = shuffleImages.shift();
      firstImage && setLeftImage(firstImage.url);
    }
    if (rightImage === '') {
      const secondImage = shuffleImages.shift();
      secondImage && setRightImage(secondImage.url);
    }
    setImagesArray(shuffleImages);
    setStartButton(false);
  };

  //リセット
  const onResetClick = () => {
    setImagesArray(storageImages);
    setLeftImage('');
    setRightImage('');
    setStartButton(true);
  };

  //左の画像を選択した場合の処理
  const leftSelectClick = () => {
    setRightFadeout(true);
    setTimeout(() => {
      const image = imagesArray.shift();
      image ? setRightImage(image.url) : setRightImage('');
      setTimeout(() => {
        setRightFadeout(false);
      }, 500);
    }, 500);
  };

  //右の画像を選択した場合の処理
  const rightSelectClick = () => {
    setLeftFadeout(true);
    setTimeout(() => {
      const image = imagesArray.shift();
      image ? setLeftImage(image.url) : setLeftImage('');
      setTimeout(() => {
        setLeftFadeout(false);
      }, 500);
    }, 500);
  };

  //シャッフル関数
  const shuffle = ([...array]) => {
    for (let i = array.length - 1; i >= 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <Box as='main' w='100%' minH='100vh' pt='70px' pb='70px'>
          <Flex
            mt={6}
            w='100%'
            maxW='1000px'
            mx='auto'
            justifyContent='center'
            alignItems='center'
            flexDirection='column'
          >
            <Flex mt={6} p={6} w='100%' justifyContent='center'>
              <Flex
                justifyContent='center'
                cursor='pointer'
                onClick={leftSelectClick}
                width={leftImage ? '100%' : 0}
                transition='0.3s'
                opacity={leftFadeout ? '0' : '1'}
              >
                <img
                  src={leftImage ? leftImage : ''}
                  alt={''}
                  className={Styles.img}
                />
              </Flex>

              <Flex
                justifyContent='center'
                cursor='pointer'
                onClick={rightSelectClick}
                width={rightImage ? '100%' : 0}
                transition='0.3s'
                opacity={rightFadeout ? '0' : '1'}
              >
                <img
                  src={rightImage ? rightImage : ''}
                  alt={''}
                  className={Styles.img}
                />
              </Flex>
            </Flex>
          </Flex>
          <Box width='100%' mt={6} textAlign='center'>
            {(!leftImage || !rightImage) && !startButton && (
              <Flex flexDirection='column' alignItems='center'>
                <Button
                  w='100%'
                  maxW='250px'
                  onClick={() => {
                    window.alert('投票ありがとうございました！');
                    onResetClick();
                  }}
                  colorScheme='orange'
                >
                  投票する
                </Button>
                <Button w='100%' maxW='250px' mt={3} onClick={onResetClick}>
                  リセット
                </Button>
              </Flex>
            )}
          </Box>
        </Box>
        {(leftFadeout || rightFadeout) && (
          <Box
            position='absolute'
            top='0'
            left='0'
            w='100%'
            h='100%'
            zIndex={10000}
          ></Box>
        )}
        {startButton && (
          <Flex
            flexDirection='column'
            position='absolute'
            w='80%'
            top='50%'
            left='50%'
            transform='translate(-50%,-50%)'
          >
            <Box as='h1' textAlign='center' fontSize='3xl'>
              {title}
            </Box>
            <Box as='h2' mt={6} textAlign='center' fontSize='3xl'>
              今から表示される画像の好きな方を
              <br />
              クリックしてください
            </Box>
            <Button
              maxW='350px'
              w='100%'
              mt={6}
              mx='auto'
              onClick={onStartClick}
              size='lg'
              colorScheme='twitter'
            >
              スタート
            </Button>
          </Flex>
        )}
      </Layout>
    </>
  );
};

export default AppId;
